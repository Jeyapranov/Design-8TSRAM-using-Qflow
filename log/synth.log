Qflow synthesis logfile created on Tue Jul 8 10:22:27 PM IST 2025
Running yosys for verilog parsing and synthesis
yosys  -s sram8t.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `sram8t.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v
Parsing Verilog input from `/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:32)
Generating RTLIL representation for module `\sram8t'.
Warning: Replacing memory \mem with list of registers. See /home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \sram8t

3.1.2. Analyzing design hierarchy..
Top module:  \sram8t
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5 in module sram8t.
Marked 6 switch rules as full_case in process $proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5 in module sram8t.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
     1/36: $5$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_DATA[7:0]$25
     2/36: $4$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_DATA[7:0]$24
     3/36: $4$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_ADDR[3:0]$23
     4/36: $3$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_ADDR[3:0]$19
     5/36: $3$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_DATA[7:0]$20
     6/36: $3$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_DATA[7:0]$22
     7/36: $3$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_ADDR[3:0]$21
     8/36: $2$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_DATA[7:0]$18
     9/36: $2$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_ADDR[3:0]$17
    10/36: $2$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_DATA[7:0]$16
    11/36: $2$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_ADDR[3:0]$15
    12/36: $1$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_DATA[7:0]$14
    13/36: $1$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_ADDR[3:0]$13
    14/36: $1$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_DATA[7:0]$12
    15/36: $1$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_ADDR[3:0]$11
    16/36: $0$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_DATA[7:0]$9
    17/36: $0$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_ADDR[3:0]$8
    18/36: $0$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_DATA[7:0]$7
    19/36: $0$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_ADDR[3:0]$6
    20/36: $0\mem[15][7:0]
    21/36: $0\mem[14][7:0]
    22/36: $0\mem[13][7:0]
    23/36: $0\mem[12][7:0]
    24/36: $0\mem[11][7:0]
    25/36: $0\mem[10][7:0]
    26/36: $0\mem[9][7:0]
    27/36: $0\mem[8][7:0]
    28/36: $0\mem[7][7:0]
    29/36: $0\mem[6][7:0]
    30/36: $0\mem[5][7:0]
    31/36: $0\mem[4][7:0]
    32/36: $0\mem[3][7:0]
    33/36: $0\mem[2][7:0]
    34/36: $0\mem[1][7:0]
    35/36: $0\mem[0][7:0]
    36/36: $0\dout[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sram8t.\dout' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $adff cell `$procdff$363' with positive edge clock and negative level reset.
Creating register for signal `\sram8t.\mem[0]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\sram8t.\mem[1]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\sram8t.\mem[2]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\sram8t.\mem[3]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$367' with positive edge clock.
Creating register for signal `\sram8t.\mem[4]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$368' with positive edge clock.
Creating register for signal `\sram8t.\mem[5]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$369' with positive edge clock.
Creating register for signal `\sram8t.\mem[6]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$370' with positive edge clock.
Creating register for signal `\sram8t.\mem[7]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$371' with positive edge clock.
Creating register for signal `\sram8t.\mem[8]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$372' with positive edge clock.
Creating register for signal `\sram8t.\mem[9]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$373' with positive edge clock.
Creating register for signal `\sram8t.\mem[10]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$374' with positive edge clock.
Creating register for signal `\sram8t.\mem[11]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$375' with positive edge clock.
Creating register for signal `\sram8t.\mem[12]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$376' with positive edge clock.
Creating register for signal `\sram8t.\mem[13]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$377' with positive edge clock.
Creating register for signal `\sram8t.\mem[14]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$378' with positive edge clock.
Creating register for signal `\sram8t.\mem[15]' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $dff cell `$procdff$379' with positive edge clock.
Creating register for signal `\sram8t.$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_ADDR' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $adff cell `$procdff$380' with positive edge clock and negative level reset.
Creating register for signal `\sram8t.$mem2reg_wr$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:27$1_DATA' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $adff cell `$procdff$381' with positive edge clock and negative level reset.
Creating register for signal `\sram8t.$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_ADDR' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $adff cell `$procdff$382' with positive edge clock and negative level reset.
Creating register for signal `\sram8t.$mem2reg_rd$\mem$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:29$2_DATA' using process `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
  created $adff cell `$procdff$383' with positive edge clock and negative level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
Removing empty process `sram8t.$proc$/home/jeyapranov/vsdflow/designs/sram8t/source/sram8t.v:22$5'.
Cleaned up 5 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.
<suppressed ~2 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..
Removed 23 unused cells and 116 unused wires.
<suppressed ~24 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module sram8t..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sram8t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$45.
    dead port 1/2 on $mux $procmux$48.
    dead port 2/2 on $mux $procmux$50.
Removed 3 multiplexer ports.
<suppressed ~17 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sram8t.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sram8t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sram8t.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell sram8t.$procmux$209_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sram8t.$procmux$226_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sram8t.$procmux$244_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sram8t.$procmux$263_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sram8t.$procmux$283_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sram8t.$procmux$304_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell sram8t.$procmux$326_CMP0 ($eq).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~244 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sram8t:
  created 0 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sram8t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sram8t.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.
<suppressed ~2 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sram8t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sram8t.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=15 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~122 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.
<suppressed ~156 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
<suppressed ~156 debug messages>
Removed a total of 52 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..
Removed 1 unused cells and 84 unused wires.
<suppressed ~2 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\sram8t' to `<abc-temp-dir>/input.blif'..
Extracted 699 gates and 851 wires to a netlist network with 151 inputs and 136 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:              AOI4 cells:       56
ABC RESULTS:               MUX cells:      408
ABC RESULTS:              NAND cells:       26
ABC RESULTS:               NOR cells:       17
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:       37
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:        internal signals:      564
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      136
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.
<suppressed ~136 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..
Removed 2 unused cells and 394 unused wires.
<suppressed ~4 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \sram8t

3.25.2. Analyzing design hierarchy..
Top module:  \sram8t
Removed 0 unused modules.

3.26. Printing statistics.

=== sram8t ===

   Number of wires:                473
   Number of wire bits:            721
   Number of public wires:          24
   Number of public wire bits:     153
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                704
     $_ANDNOT_                      11
     $_AOI4_                        56
     $_DFF_PN0_                      8
     $_DFF_P_                      128
     $_MUX_                        408
     $_NAND_                        26
     $_NOR_                         17
     $_OAI3_                         1
     $_ORNOT_                       12
     $_OR_                          37

3.27. Executing CHECK pass (checking for obvious problems).
checking module sram8t..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\sram8t':
  mapped 8 $_DFF_PN0_ cells to \DFFSR cells.
  mapped 128 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sram8t..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sram8t.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\sram8t' to `<abc-temp-dir>/input.blif'..
Extracted 568 gates and 719 wires to a netlist network with 151 inputs and 136 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:       34
ABC RESULTS:           AOI22X1 cells:       23
ABC RESULTS:             INVX1 cells:      128
ABC RESULTS:            MUX2X1 cells:      102
ABC RESULTS:           NAND2X1 cells:       62
ABC RESULTS:           NAND3X1 cells:       31
ABC RESULTS:            NOR2X1 cells:       48
ABC RESULTS:            NOR3X1 cells:       19
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:           OAI22X1 cells:        8
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:        internal signals:      432
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      136
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 719 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port sram8t.addr: Missing option -inpad.
Don't map input port sram8t.clk: Missing option -inpad.
Don't map input port sram8t.cs: Missing option -inpad.
Don't map input port sram8t.din: Missing option -inpad.
Mapping port sram8t.dout using BUFX2.
Don't map input port sram8t.re: Missing option -inpad.
Don't map input port sram8t.rst_n: Missing option -inpad.
Don't map input port sram8t.we: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sram8t..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sram8t.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sram8t'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sram8t..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sram8t.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== sram8t ===

   Number of wires:                382
   Number of wire bits:            637
   Number of public wires:         382
   Number of public wire bits:     637
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                620
     AND2X2                          2
     AOI21X1                        34
     AOI22X1                        23
     BUFX2                           8
     DFFPOSX1                      128
     DFFSR                           8
     INVX1                         128
     MUX2X1                        102
     NAND2X1                        62
     NAND3X1                        31
     NOR2X1                         48
     NOR3X1                         19
     OAI21X1                        16
     OAI22X1                         8
     OR2X2                           3

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: a8daf9fb3d
CPU: user 0.83s system 0.00s, MEM: 18.61 MB total, 12.98 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 16x opt_clean (0 sec), 14% 16x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl sram8t_mapped.blif sram8t /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I sram8t_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif sram8t.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 346.397) from node _34_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.02833 (latency = 502.833 ps)
Top input node fanout is 136 (load 3649.21) from node clk.
Warning 1: load of 171.117 is 1.53948 times greater than strongest gate OR2X2
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 159.681 is 2.71798 times greater than strongest gate NOR3X1
Warning 4: load of 195.048 is 3.33991 times greater than strongest gate NAND2X1
Warning 7: load of 197.991 is 3.43624 times greater than strongest gate NAND3X1
Warning 27: load of 254.459 is 4.37273 times greater than strongest gate NOR2X1
Warning 47: load of 269.686 is 4.6344 times greater than strongest gate NOR2X1
247 gates exceed specified minimum load.
11 buffers were added.
18 gates were changed.

Gate counts by drive strength:

	"" gates	In: 8    	Out: 8    	+0
	"1" gates	In: 599    	Out: 581    	-18
	"2" gates	In: 13    	Out: 18    	+5

Number of gates changed: 29
gates resized: 29
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 633.902) from node _34_,
driven by INVX8 with strength 456.133 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.46256 (latency = 446.256 ps)
Top input node fanout is 11 (load 411.304) from node clk.
Warning 1: load of 643.902 is 2.78005 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 15: load of 195.048 is 3.33991 times greater than strongest gate NAND2X1
Warning 18: load of 197.991 is 3.43624 times greater than strongest gate NAND3X1
Warning 38: load of 254.459 is 4.37273 times greater than strongest gate NOR2X1
Warning 58: load of 269.686 is 4.6344 times greater than strongest gate NOR2X1
258 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 8    	Out: 8    	+0
	"1" gates	In: 592    	Out: 592    	+0
	"2" gates	In: 18    	Out: 18    	+0
	"4" gates	In: 5    	Out: 5    	+0
	"8" gates	In: 8    	Out: 8    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/jeyapranov/vsdflow/designs/sram8t/synthesis
Files:
   Verilog: /home/jeyapranov/vsdflow/designs/sram8t/synthesis/sram8t.rtl.v
   Verilog: /home/jeyapranov/vsdflow/designs/sram8t/synthesis/sram8t.rtlnopwr.v
   Verilog: /home/jeyapranov/vsdflow/designs/sram8t/synthesis/sram8t.rtlbb.v
   Spice:   /home/jeyapranov/vsdflow/designs/sram8t/synthesis/sram8t.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f sram8t.spc sram8t.xspice

Synthesis script ended on Tue Jul 8 10:22:29 PM IST 2025
